// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  password      String
  name          String?
  notifications Json[]
  createdAt     DateTime        @default(now())
  role          Role            @default(user)
  Wordbook      Wordbook[]
  learnedWords  Words[]         @relation("learnedBy")
  likedWords    Words[]         @relation("likedBy")
  Stats         Stats[]
  Tests         Tests[]
  Notifications Notifications[]
  Wordle        Wordle[]
}

model Wordbook {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  name        String?  @default("My Wordbook")
  description String?
  likes       Int      @default(0)
  words       Words[]
  private     Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Stats {
  id           String  @id @default(cuid())
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  translated   Int     @default(0)
  rightanswers Int     @default(0)
  wronganswers Int     @default(0)
  lvl          Int     @default(0)
  points       Int?    @default(0)
  private      Boolean @default(true)
}

model Tests {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  name      String   @default("My Test")
  data      Json[]
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  private   Boolean  @default(true)
}

model Helper {
  id       String @id
  ya_token String
}

model Words {
  id          String    @id @default(cuid())
  eng         String
  rus         String
  createdAt   DateTime  @default(now())
  Wordbook    Wordbook? @relation(fields: [wordbookId], references: [id], onDelete: Cascade)
  wordbookId  String?
  LikedBy     User?     @relation("likedBy", fields: [likedById], references: [id], onDelete: Cascade)
  likedById   String?
  LearnedBy   User?     @relation("learnedBy", fields: [learnedById], references: [id], onDelete: Cascade)
  learnedById String?
}

model Notifications {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  type      NotificationType @default(default)
  title     String
  text      String
  User      User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
}

model Wordle {
  id         String    @id @default(cuid())
  word       String
  maxTries   Int       @default(6)
  tries      String[]  @default([])
  User       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  createdAt  DateTime  @default(now())
  finishDate DateTime?
}

enum NotificationType {
  default
  error
  succsess
}

enum Role {
  user
  admin
}

enum Category {
  learned
  liked
  any
}
